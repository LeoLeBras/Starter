 
 /**
  * Font settings
  *
  */
  
  $base-font-size : map-get($fonts_settings, font-size);
  $base-line-height : map-get($fonts_settings, line-height);
  $base-font-family : map-get($fonts_settings, font-family);



 /* ------------------------------------- */



 /**
  * Rem
  *
  * @params font-size value in px
  * @return value in rem unit
  */

 @function rem($value, $baseline: $base-font-size){
     @if $value == '0'{
         @return 0; 
     } 
     
     @if type-of($value) == list{
         $result: ();

         @each $e in $value{
             $result: append($result, rem($e, $baseline));
         }
         
         @return $result;
     }
     @else{
         @return if(type-of($value) == number and unit($value) == px, $value / $baseline * 1rem, $value);
     }
 }






 /**
  * Clearfix
  *
  */

 @mixin clearfix() {
     &:before,
     &:after {
         content: "";
         display: table;
     }
     &:after {
         clear: both;
     }
 }






 /**
  * Respond-to
  * An adaptation of http://www.sitepoint.com/managing-responsive-breakpoints-sass/ (Hugo Giraudel)
  *
  * @params $breakpoint
  * @return CSS media queries with @content
  */

 @mixin respond-to($breakpoint) {
     @if type-of($breakpoint) == 'string' {
         @if map-has-key($breakpoints, $breakpoint) {
             $breakpoint : inspect(map-get($breakpoints, $breakpoint));
             
             @media only screen and (min-width: $breakpoint) {
                 @content;
             }
         }  
         @else {
             @error 'No value found for `#{$breakpoint}`. ';
         }    
     }
     @else{
         @media only screen and (min-width: $breakpoint) {
             @content;
         }
     }
 }






 /**
  * Font-settings
  *
  */

 @mixin font-settings() {    
     html {
         font-size: 100%;
         font-family: $base-font-family;
     }

     body{
         font-size: $base-font-size;
         line-height: $base-line-height;
     }
 }






 /**
  * Strip units
  *
  * @return var without units
  */

 @function strip-units($number) {
     @return $number / ($number * 0 + 1);
 }






 /**
  * Square
  *
  */

 @mixin square($a) {
     width:rem($a);    height: rem($a);
 }


 /* ------------------------------------- */